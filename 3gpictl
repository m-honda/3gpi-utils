#!/bin/bash
#
# control 3GPi module
#
TIMEOUT=10
CONFIG=/etc/default/3gpi-utils

[ -r $CONFIG ] && . $CONFIG

VERSION="3gpictl version 2.0"

USAGE="Usage: 3gpictl [ OPTION ] COMMAND

Options:
  --timeout, -t [N]  set timeout to N sec (default=10)

Commands:
  --poweron          turn on module
  --poweroff         turn off module
  --reset            reset module
  --status           show power status
  --gpson            turn on GPS function
  --gpsoff           turn off GPS function
  --riclear          clear RI
  --rienable         enable RI
  --version, -v      display version and exit
  --help, -h         display help and exit
"

SCRIPT_PATH=/usr/lib/3gpi-utils/chatscripts

#
# Usage: chat_console [FILE] [TIMEOUT]
#
chat_console ()
{
    local script=${SCRIPT_PATH}/${1}
    
    if [ ! -w $CONSOLE_PORT ]
    then
        echo "cannot access ${CONSOLE_PORT}"
        return 1
    fi
    
    if [ ! -r $script ]
    then
        echo "cannot read ${script}"
        return 1
    fi
    
    chat -t $2 -f $script < $CONSOLE_PORT > $CONSOLE_PORT
}

#
# Usage: stat_gpio [GPIO_PIN]
#
stat_gpio ()
{
    local port=/sys/class/gpio/gpio${1}/value

    if [ ! -r $port ]
    then
        echo "cannot access $port"
        return 1
    fi

    case "$(cat $port)" in
    0)
        echo "off"
        ;;
    1)
        echo "on"
        ;;
    *)
        echo "unknown"
        return 1
        ;;
    esac
}

#
# Usage: ctl_gpio [CONDITION] [GPIO_PIN] [TOGGLE_INTERVAL] [TIMEOUT]
#
ctl_gpio ()
{
    local i port="/sys/class/gpio/gpio${2}/value"

    for i in `seq 0 $4`
    do
        STATUS=$(stat_gpio $STATUS_PIN)

        if [ $? -ne 0 ]
        then
            echo "$STATUS"
            return 1
        fi

        if [ $STATUS = $1 ]
        then
            if [ $i -eq 0 ]
            then
                echo "already power $1"
            fi
            return 0
        fi

        if [ ! -w $port ]
        then
            echo "cannot access $port"
            return 1
        fi

        if [ $i -eq 0 ]
        then
            echo 1 > $port
            sleep $3
            echo 0 > $port
        fi
        sleep 1
    done

    echo "timeout power ${1}"

    return 1
}


ARGS=($@)
#
# check options
#
for i in $(seq 0 $((${#ARGS[@]} - 1)))
do
  case ${ARGS[$i]} in
    -t|--timeout)
      TIMEOUT=${ARGS[$(($i + 1))]}
      unset ARGS[$i]
      unset ARGS[$(($i + 1))]
      ;;
    *)
      ;;
  esac
done

ARGS=(${ARGS[@]})
#
# execute command
#
case ${ARGS[0]} in
--poweron)
    ctl_gpio on $POWER_PIN 3 $TIMEOUT
    ;;
--poweroff)
    ctl_gpio off $POWER_PIN 3 $TIMEOUT
    ;;
--reset)
    ctl_gpio off $RESET_PIN 1 $TIMEOUT
    ;;
--status)
    stat_gpio $STATUS_PIN
    ;;
--riclear)
    chat_console ri-clear $TIMEOUT
    ;;
--rienable)
    if [ "$STORE_SMS_ON_RING" != "0" ]
    then
      chat_console ri-enable-me $TIMEOUT
    else
      chat_console ri-enable-sm $TIMEOUT
    fi
    ;;
--gpson)
    chat_console gps-on $TIMEOUT
    ;;
--gpsoff)
    chat_console gps-off $TIMEOUT
    ;;
-v|--version)
    echo "$VERSION"
    ;;
-h|--help)
    echo "$USAGE"
    ;;
*)
    echo "$USAGE"
    exit 1
    ;;
esac

if [ $? -ne 0 ]
then
    echo "error: command failure"
    exit 2
fi

